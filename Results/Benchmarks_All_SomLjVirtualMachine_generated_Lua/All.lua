-- generated by SomLjVirtualMachine on Sa. Aug. 29 23:05:07 2020

local metaclass = All
local class = All._class
local function _block(f) local t = { _f = f }; setmetatable(t,Block._class); return t end
local _str = _primitives._newString
local _sym = _primitives._newSymbol
local _dbl = _primitives._newDouble
local _cl = _primitives._checkLoad

function class.all(self)
	return ((((((((((((((((Fibonacci):_0c(Dispatch)):_0c(Bounce)):_0c(Loop)):_0c(Permute)):_0c(Queens)):_0c(List)):_0c(Recurse)):_0c(Storage)):_0c(Sieve)):_0c(BubbleSort)):_0c(QuickSort)):_0c(Sum)):_0c(Towers)):_0c(TreeSort)):_0c(IntegerLoop)):_0c(FieldLoop);
end

function class.run_(self,params)
	(((params):length()):_0l((2))):ifTrue_ifFalse_(_block( function()
				return (self):exec_((100))
	end ),_block( function()
				return (self):exec_(((params):at_((2))):asInteger())
	end ));
	return self
end

function class.printUsage(self)
	(_str("./som.sh -cp Smalltalk Examples/Benchmarks/All.som [number-of-iterations]")):println();
	(_str("")):println();
	(_str("  number-of-iterations - the number of time each benchmark is executed, default: 1")):println();
	return self
end

function class.initialize(self)
	self._super.initialize(self);
	self[8] = (0);
	return self
end

function class.exec_(self,iterations)
	(_str("Start execution of all benchmarks. Iterations: ")):print();
	(iterations):println();
	((self):all()):do_(_block( function(cls)
		(self):initialize();
		(self):benchmarkClass_(cls);
		(self):printAll_(false);
		(self):maxRuntime_((3));
		(self):numIterations_(iterations);
		(self):warmUp_((10));
				return (self):runBenchmark()
	end ));
	(self):printTotal();
	return self
end

function class.reportBenchmark_result_(self,bench,total)
	(_str("")):println();
	(_str("Benchmark: ")):print();
	((bench):name()):println();
	(((((_str("   Iterations: ")):_0p(self[3])):_0p(_str(" (elapsed time "))):_0p(((total):_0hh((1000))):round())):_0p(_str(" ms)"))):println();
	(((_str("   AVERAGE: ")):_0p((((total):_0hh(self[3])):_0hh((1000))):round())):_0p(_str(" ms"))):println();
	self[8] = (self[8]):_0p((total):_0hh(self[3]));
	return self
end

function class.printTotal(self)
	(((_str("Summed Average Runtime: ")):_0p((((self[8]):_0hh((1000))):round()):asString())):_0p(_str(" ms"))):println();
	return self
end

