-- generated by SomLjVirtualMachine on Sa. Aug. 29 23:05:07 2020

local metaclass = System
local class = System._class
local function _block(f) local t = { _f = f }; setmetatable(t,Block._class); return t end
local _str = _primitives._newString
local _sym = _primitives._newSymbol
local _dbl = _primitives._newDouble
local _cl = _primitives._checkLoad

function class.initialize_(self,arguments)
	local _nonLocal, _nlRes
	local _status, _pcallRes = pcall( function()
		local application
		(((arguments):length()):_0l((1))):ifTrue_(_block( function()
			(_str("No class specified")):println();
			_nlRes = nil; _nonLocal = true; error(_nlRes)
		end ));
		application = ((self):resolve_(((arguments):at_((1))):asSymbol())):new();
		((application):respondsTo_(_sym("run_"))):ifTrue_ifFalse_(_block( function()
						return (application):run_(arguments)
		end ),_block( function()
						return (application):run()
		end ));
		return self
	end )
	if _status then return _pcallRes elseif _nonLocal then return _nlRes else error(_pcallRes) end
end

function class.resolve_(self,symbol)
	local _nonLocal, _nlRes
	local _status, _pcallRes = pcall( function()
		local class
		local current_class
		(((self):global_(symbol)):_0qq(nil)):ifFalse_(_block( function()
			_nlRes = (self):global_(symbol); _nonLocal = true; error(_nlRes)
		end ));
		class = (self):load_(symbol);
		((class):_0qq(nil)):ifFalse_(_block( function()
			current_class = class;
			(_block( function()
								return ((self):global_((current_class):name())):_0qq(nil)
			end )):whileTrue_(_block( function()
				(self):global_put_((current_class):name(),current_class);
				current_class = (current_class):superclass()
				return current_class
			end ));
			_nlRes = class; _nonLocal = true; error(_nlRes)
		end ));
		(self):error_((_str("Unable to resolve ")):_0p(symbol));
		return self
	end )
	if _status then return _pcallRes elseif _nonLocal then return _nlRes else error(_pcallRes) end
end

function class.exit(self)
	(self):exit_((0));
	return self
end

function metaclass.new(self)
	(self):error_(_str("The system object is singular"));
	return self
end

