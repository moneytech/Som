-- generated by SomLjVirtualMachine on Sa. Aug. 29 23:05:07 2020

local metaclass = Vector
local class = Vector._class
local function _block(f) local t = { _f = f }; setmetatable(t,Block._class); return t end
local _str = _primitives._newString
local _sym = _primitives._newSymbol
local _dbl = _primitives._newDouble
local _cl = _primitives._checkLoad

function class.at_(self,index)
	return (self):checkIndex_ifValid_(index,_block( function()
				return (self[3]):at_(index)
	end ));
end

function class.at_put_(self,index,value)
	return (self):checkIndex_ifValid_(index,_block( function()
				return (self[3]):at_put_(index,value)
	end ));
end

function class.first(self)
	return (((self):size()):_0g((0))):ifTrue_ifFalse_(_block( function()
				return (self[3]):at_((1))
	end ),_block( function()
				return nil
	end ));
end

function class.do_(self,block)
	(self[1]):to_do_((self[2]):_0m((1)),_block( function(i)
				return (block):value_((self[3]):at_(i))
	end ));
	return self
end

function class.doIndexes_(self,block)
	(self[1]):to_do_((self[2]):_0m((1)),block);
	return self
end

function class._0c(self,element)
	return (self):append_(element);
end

function class.append_(self,element)
	((self[2]):_0gq((self[3]):length())):ifTrue_(_block( function()
		local newStorage
		newStorage = (Array):new_(((2)):_0s((self[3]):length()));
		(self[3]):doIndexes_(_block( function(i)
						return (newStorage):at_put_(i,(self[3]):at_(i))
		end ));
		self[3] = newStorage
		return self[3]
	end ));
	(self[3]):at_put_(self[2],element);
	self[2] = (self[2]):_0p((1));
	return self;
end

function class.remove(self)
	local _nonLocal, _nlRes
	local _status, _pcallRes = pcall( function()
		((self[2]):_0g(self[1])):ifTrue_ifFalse_(_block( function()
			self[2] = (self[2]):_0m((1));
			_nlRes = (self[3]):at_(self[2]); _nonLocal = true; error(_nlRes)
		end ),_block( function()
						return (self):error_(_str("Vector: Attempting to pop element from empty Vector"))
		end ));
		return self
	end )
	if _status then return _pcallRes elseif _nonLocal then return _nlRes else error(_pcallRes) end
end

function class.remove_(self,object)
	local newArray
	local newLast
	local found
	newArray = (Array):new_((self):capacity());
	newLast = (1);
	found = false;
	(self):do_(_block( function(it)
				return ((it):_0qq(object)):ifTrue_ifFalse_(_block( function()
			found = true
			return found
		end ),_block( function()
			(newArray):at_put_(newLast,it);
			newLast = (newLast):_0p((1))
			return newLast
		end ))
	end ));
	self[3] = newArray;
	self[2] = newLast;
	self[1] = (1);
	return found;
end

function class.contains_(self,anObject)
	return (self[3]):contains_(anObject);
end

function class.println(self)
	(_str("(")):print();
	(self):do_(_block( function(it)
		(_str("(")):print();
		(it):print();
				return (_str(")")):print()
	end ));
	(_str(")")):println();
	return self
end

function class.isEmpty(self)
	return (self[2]):_0q(self[1]);
end

function class.size(self)
	return (self[2]):_0m(self[1]);
end

function class.capacity(self)
	return (self[3]):length();
end

function class.asArray(self)
	local arr
	arr = (Array):new_((self):size());
	(self):doIndexes_(_block( function(i)
				return (arr):at_put_(i,(self):at_(i))
	end ));
	return arr;
end

function class.initialize_(self,size)
	self[3] = (Array):new_(size);
	self[1] = (1);
	self[2] = (1);
	return self
end

function class.checkIndex_ifValid_(self,index,block)
	return (((self[1]):_0lq(index)):_0aa((index):_0lq(self[2]))):ifTrue_ifFalse_(_block( function()
				return (block):value()
	end ),_block( function()
				return (self):error_(((((((_str("Vector[")):_0p((self[1]):asString())):_0p(_str(".."))):_0p((self[2]):asString())):_0p(_str("]: Index "))):_0p((index):asString())):_0p(_str(" out of bounds")))
	end ));
end

function class.removeFirst(self)
	((self):isEmpty()):ifTrue_(_block( function()
				return (self):error_(_str("OrderedCollection is empty"))
	end ));
	self[1] = (self[1]):_0p((1));
	return (self[3]):at_((self[1]):_0m((1)));
end

function class.asSet(self)
	return ((Set):new()):addAll_(self);
end

function metaclass.new(self)
	return (self):new_((50));
end

function metaclass.new_(self,initialSize)
	return (self._super.new(self)):initialize_(initialSize);
end

function metaclass.with_(self,elem)
	local newVector
	newVector = (self):new_((1));
	(newVector):append_(elem);
	return newVector;
end

