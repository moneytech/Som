-- generated by SomLjVirtualMachine on Sa. Aug. 29 23:05:07 2020

local metaclass = Integer
local class = Integer._class
local function _block(f) local t = { _f = f }; setmetatable(t,Block._class); return t end
local _str = _primitives._newString
local _sym = _primitives._newSymbol
local _dbl = _primitives._newDouble
local _cl = _primitives._checkLoad

function class.abs(self)
	return ((self):_0l((0))):ifTrue_ifFalse_(((0)):_0m(self),self);
end

function class.negated(self)
	return ((0)):_0m(self);
end

function class._0tq(self,argument)
	return ((self):_0q(argument)):_not();
end

function class._0g(self,argument)
	return ((self):_0gq(argument)):and_(_block( function()
				return (self):_0lg(argument)
	end ));
end

function class._0gq(self,argument)
	return ((self):_0l(argument)):_not();
end

function class._0lq(self,argument)
	return ((self):_0l(argument)):or_(_block( function()
				return (self):_0q(argument)
	end ));
end

function class.negative(self)
	return (self):_0l((0));
end

function class.between_and_(self,a,b)
	return ((self):_0g(a)):and_(_block( function()
				return (self):_0l(b)
	end ));
end

function class.hashcode(self)
	return self;
end

function class.to_do_(self,limit,block)
	(self):to_by_do_(limit,(1),block);
	return self
end

function class.to_by_do_(self,limit,step,block)
	local i
	i = self;
	(_block( function()
				return (i):_0lq(limit)
	end )):whileTrue_(_block( function()
		(block):value_(i);
		i = (i):_0p(step)
		return i
	end ));
	return self
end

function class.downTo_do_(self,limit,block)
	(self):downTo_by_do_(limit,(1),block);
	return self
end

function class.downTo_by_do_(self,limit,step,block)
	local i
	i = self;
	(_block( function()
				return (i):_0gq(limit)
	end )):whileTrue_(_block( function()
		(block):value_(i);
		i = (i):_0m(step)
		return i
	end ));
	return self
end

function class.timesRepeat_(self,block)
	((1)):to_do_(self,_block( function(i)
				return (block):value()
	end ));
	return self
end

function class.to_(self,upper)
	local range
	range = (Array):new_(((upper):_0m(self)):_0p((1)));
	(self):to_do_(upper,_block( function(i)
				return (range):at_put_(i,i)
	end ));
	return range;
end

function class.max_(self,otherInt)
	local _nonLocal, _nlRes
	local _status, _pcallRes = pcall( function()
		((self):_0l(otherInt)):ifTrue_ifFalse_(_block( function()
			_nlRes = otherInt; _nonLocal = true; error(_nlRes)
		end ),_block( function()
			_nlRes = self; _nonLocal = true; error(_nlRes)
		end ));
		return self
	end )
	if _status then return _pcallRes elseif _nonLocal then return _nlRes else error(_pcallRes) end
end

