-- generated by SomLjVirtualMachine on Sa. Aug. 29 23:05:07 2020

local metaclass = Array
local class = Array._class
local function _block(f) local t = { _f = f }; setmetatable(t,Block._class); return t end
local _str = _primitives._newString
local _sym = _primitives._newSymbol
local _dbl = _primitives._newDouble
local _cl = _primitives._checkLoad

function class.putAll_(self,block)
	(self):doIndexes_(_block( function(i)
				return (self):at_put_(i,(block):value())
	end ));
	return self
end

function class.first(self)
	return (self):at_((1));
end

function class.last(self)
	return (self):at_((self):length());
end

function class.do_(self,block)
	(self):doIndexes_(_block( function(i)
				return (block):value_((self):at_(i))
	end ));
	return self
end

function class.doIndexes_(self,block)
	((1)):to_do_((self):length(),_block( function(i)
				return (block):value_(i)
	end ));
	return self
end

function class.from_to_do_(self,start,_end,block)
	(start):to_do_(_end,_block( function(i)
				return (block):value_((self):at_(i))
	end ));
	return self
end

function class.copyFrom_to_(self,start,_end)
	local result
	local i
	result = (Array):new_(((_end):_0m(start)):_0p((1)));
	i = (1);
	(self):from_to_do_(start,_end,_block( function(e)
		(result):at_put_(i,e);
		i = (i):_0p((1))
		return i
	end ));
	return result;
end

function class.copyFrom_(self,start)
	return (self):copyFrom_to_(start,(self):length());
end

function class.replaceFrom_to_with_startingAt_(self,start,stop,replacement,repStart)
	local index
	local repOff
	repOff = (repStart):_0m(start);
	index = (start):_0m((1));
	(_block( function()
				return (( function()index = (index):_0p((1)); return index end )()):_0lq(stop)
	end )):whileTrue_(_block( function()
				return (self):at_put_(index,(replacement):at_((repOff):_0p(index)))
	end ));
	return self
end

function class.copy(self)
	return (self):copyFrom_((1));
end

function class.sum(self)
	return (self):inject_into_((0),_block( function(sub,elem)
				return (sub):_0p(elem)
	end ));
end

function class.average(self)
	return ((self):sum()):_0h((self):length());
end

function class.contains_(self,element)
	local _nonLocal, _nlRes
	local _status, _pcallRes = pcall( function()
		(self):do_(_block( function(e)
						return ((e):_0q(element)):ifTrue_(_block( function()
				_nlRes = true; _nonLocal = true; error(_nlRes)
			end ))
		end ));
		return false;
	end )
	if _status then return _pcallRes elseif _nonLocal then return _nlRes else error(_pcallRes) end
end

function class.indexOf_(self,element)
	local _nonLocal, _nlRes
	local _status, _pcallRes = pcall( function()
		(self):doIndexes_(_block( function(i)
						return (((self):at_(i)):_0q(element)):ifTrue_(_block( function()
				_nlRes = i; _nonLocal = true; error(_nlRes)
			end ))
		end ));
		return nil;
	end )
	if _status then return _pcallRes elseif _nonLocal then return _nlRes else error(_pcallRes) end
end

function class.lastIndexOf_(self,element)
	local _nonLocal, _nlRes
	local _status, _pcallRes = pcall( function()
		((self):length()):downTo_do_((1),_block( function(i)
						return (((self):at_(i)):_0q(element)):ifTrue_(_block( function()
				_nlRes = i; _nonLocal = true; error(_nlRes)
			end ))
		end ));
		return nil;
	end )
	if _status then return _pcallRes elseif _nonLocal then return _nlRes else error(_pcallRes) end
end

function class.collect_(self,aBlock)
	local result
	result = (Array):new_((self):length());
	(self):doIndexes_(_block( function(i)
				return (result):at_put_(i,(aBlock):value_((self):at_(i)))
	end ));
	return result;
end

function class.inject_into_(self,sub,aBlock)
	local next
	next = sub;
	(self):do_(_block( function(e)
		next = (aBlock):value_with_(next,e)
		return next
	end ));
	return next;
end

function class.reject_(self,aBlock)
	return (self):select_(_block( function(element)
				return ((aBlock):value_(element)):_0qq(false)
	end ));
end

function class.select_(self,aBlock)
	local newCollection
	newCollection = (Vector):new_((self):length());
	(self):do_(_block( function(each)
				return ((aBlock):value_(each)):ifTrue_(_block( function()
						return (newCollection):append_(each)
		end ))
	end ));
	return newCollection;
end

function class.union_(self,aCollection)
	local new
	new = (Set):new();
	(new):addAll_(self);
	(new):addAll_(aCollection);
	return new;
end

function metaclass.new(self)
	return (self):new_((0));
end

function metaclass.new_withAll_(self,length,block)
	return ((self):new_(length)):putAll_(block);
end

function metaclass.with_(self,a)
	local arr
	arr = (self):new_((1));
	(arr):at_put_((1),a);
	return arr;
end

function metaclass.with_with_(self,a,b)
	local arr
	arr = (self):new_((2));
	(arr):at_put_((1),a);
	(arr):at_put_((2),b);
	return arr;
end

function metaclass.with_with_with_(self,a,b,c)
	local arr
	arr = (self):new_((3));
	(arr):at_put_((1),a);
	(arr):at_put_((2),b);
	(arr):at_put_((3),c);
	return arr;
end

