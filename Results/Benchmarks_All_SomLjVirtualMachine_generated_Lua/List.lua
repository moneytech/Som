-- generated by SomLjVirtualMachine on Sa. Aug. 29 23:05:07 2020

local metaclass = List
local class = List._class
local function _block(f) local t = { _f = f }; setmetatable(t,Block._class); return t end
local _str = _primitives._newString
local _sym = _primitives._newSymbol
local _dbl = _primitives._newDouble
local _cl = _primitives._checkLoad

function class.benchmark(self)
	local result
	result = (self):taklWithX_withY_withZ_((self):makeList_((15)),(self):makeList_((10)),(self):makeList_((6)));
	return (result):length();
end

function class.verifyResult_(self,result)
	return (self):assert_equals_((10),result);
end

function class.makeList_(self,length)
	local _nonLocal, _nlRes
	local _status, _pcallRes = pcall( function()
		((length):_0q((0))):ifTrue_ifFalse_(_block( function()
			_nlRes = nil; _nonLocal = true; error(_nlRes)
		end ),_block( function()
			_nlRes = ((ListElement):new_(length)):next_((self):makeList_((length):_0m((1)))); _nonLocal = true; error(_nlRes)
		end ));
		return self
	end )
	if _status then return _pcallRes elseif _nonLocal then return _nlRes else error(_pcallRes) end
end

function class.isShorter_than_(self,x,y)
	local _nonLocal, _nlRes
	local _status, _pcallRes = pcall( function()
		local xTail
		local yTail
		xTail = x;
		yTail = y;
		(_block( function()
						return (yTail):isNil()
		end )):whileFalse_(_block( function()
			((xTail):isNil()):ifTrue_(_block( function()
				_nlRes = true; _nonLocal = true; error(_nlRes)
			end ));
			xTail = (xTail):next();
			yTail = (yTail):next()
			return yTail
		end ));
		return false;
	end )
	if _status then return _pcallRes elseif _nonLocal then return _nlRes else error(_pcallRes) end
end

function class.taklWithX_withY_withZ_(self,x,y,z)
	local _nonLocal, _nlRes
	local _status, _pcallRes = pcall( function()
		((self):isShorter_than_(y,x)):ifTrue_ifFalse_(_block( function()
			_nlRes = (self):taklWithX_withY_withZ_((self):taklWithX_withY_withZ_((x):next(),y,z),(self):taklWithX_withY_withZ_((y):next(),z,x),(self):taklWithX_withY_withZ_((z):next(),x,y)); _nonLocal = true; error(_nlRes)
		end ),_block( function()
			_nlRes = z; _nonLocal = true; error(_nlRes)
		end ));
		return self
	end )
	if _status then return _pcallRes elseif _nonLocal then return _nlRes else error(_pcallRes) end
end

