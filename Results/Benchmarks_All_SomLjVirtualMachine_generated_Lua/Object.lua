-- generated by SomLjVirtualMachine on Sa. Aug. 29 23:05:07 2020

local metaclass = Object
local class = Object._class
local function _block(f) local t = { _f = f }; setmetatable(t,Block._class); return t end
local _str = _primitives._newString
local _sym = _primitives._newSymbol
local _dbl = _primitives._newDouble
local _cl = _primitives._checkLoad

function class._0q(self,other)
	return (self):_0qq(other);
end

function class._0lg(self,argument)
	return ((self):_0q(argument)):_not();
end

function class._0tq(self,other)
	return ((self):_0qq(other)):_not();
end

function class.isNil(self)
	return false;
end

function class.notNil(self)
	return true;
end

function class.asString(self)
	return (_str("instance of ")):_0p((self):class());
end

function class._0c(self,element)
	return (((Vector):new()):append_(self)):append_(element);
end

function class.value(self)
	return self;
end

function class.ifNil_(self,aBlock)
	return self;
end

function class.ifNotNil_(self,aBlock)
	return (aBlock):value();
end

function class.ifNil_ifNotNil_(self,noGoBlock,goBlock)
	return (goBlock):value();
end

function class.print(self)
	((self):asString()):print();
	return self
end

function class.println(self)
	(self):print();
	(_cl("system")):printNewline();
	return self
end

function class.error_(self,string)
	(_str("")):println();
	((_str("ERROR: ")):_0p(string)):println();
	(_cl("system")):exit_((1));
	return self
end

function class.subclassResponsibility(self)
	(self):error_(_str("This method is abstract and should be overridden"));
	return self
end

function class.doesNotUnderstand_arguments_(self,selector,arguments)
	(self):error_((((_str("Method ")):_0p(selector)):_0p(_str(" not found in class "))):_0p(((self):class()):name()));
	return self
end

function class.escapedBlock_(self,block)
	(self):error_(_str("Block has escaped and cannot be executed"));
	return self
end

function class.unknownGlobal_(self,name)
	return (_cl("system")):resolve_(name);
end

function class.respondsTo_(self,aSymbol)
	local _nonLocal, _nlRes
	local _status, _pcallRes = pcall( function()
		(((self):class()):hasMethod_(aSymbol)):ifTrue_ifFalse_(_block( function()
			_nlRes = true; _nonLocal = true; error(_nlRes)
		end ),_block( function()
			local cls
			cls = ((self):class()):superclass();
			(_block( function()
								return (cls):isNil()
			end )):whileFalse_(_block( function()
								return ((cls):hasMethod_(aSymbol)):ifTrue_ifFalse_(_block( function()
					_nlRes = true; _nonLocal = true; error(_nlRes)
				end ),_block( function()
					cls = (cls):superclass()
					return cls
				end ))
			end ));
			_nlRes = false; _nonLocal = true; error(_nlRes)
		end ));
		return self
	end )
	if _status then return _pcallRes elseif _nonLocal then return _nlRes else error(_pcallRes) end
end

