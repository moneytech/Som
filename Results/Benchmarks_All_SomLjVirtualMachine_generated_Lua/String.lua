-- generated by SomLjVirtualMachine on Sa. Aug. 29 23:05:07 2020

local metaclass = String
local class = String._class
local function _block(f) local t = { _f = f }; setmetatable(t,Block._class); return t end
local _str = _primitives._newString
local _sym = _primitives._newSymbol
local _dbl = _primitives._newDouble
local _cl = _primitives._checkLoad

function class._0p(self,argument)
	return (self):concatenate_((argument):asString());
end

function class.asString(self)
	return self;
end

function class.substringFrom_to_(self,start,_end)
	local _nonLocal, _nlRes
	local _status, _pcallRes = pcall( function()
		((((_end):_0lq((self):length())):_0aa((start):_0g((0)))):_0aa((start):_0lq(_end))):ifTrue_ifFalse_(_block( function()
			_nlRes = (self):primSubstringFrom_to_(start,_end); _nonLocal = true; error(_nlRes)
		end ),_block( function()
						return (self):error_(((((((_str("Attempting to index string out of its bounds (start: ")):_0p((start):asString())):_0p(_str(" end: "))):_0p((_end):asString())):_0p(_str(" length: "))):_0p(((self):length()):asString())):_0p(_str(")")))
		end ));
		return self
	end )
	if _status then return _pcallRes elseif _nonLocal then return _nlRes else error(_pcallRes) end
end

function class.beginsWith_(self,prefix)
	local _nonLocal, _nlRes
	local _status, _pcallRes = pcall( function()
		(((self):length()):_0l((prefix):length())):ifTrue_(_block( function()
			_nlRes = false; _nonLocal = true; error(_nlRes)
		end ));
		((1)):to_do_((prefix):length(),_block( function(i)
						return (((self):charAt_(i)):_0q((prefix):charAt_(i))):ifFalse_(_block( function()
				_nlRes = false; _nonLocal = true; error(_nlRes)
			end ))
		end ));
		return true;
	end )
	if _status then return _pcallRes elseif _nonLocal then return _nlRes else error(_pcallRes) end
end

function class.endsWith_(self,suffix)
	local _nonLocal, _nlRes
	local _status, _pcallRes = pcall( function()
		local l
		local sufL
		l = (self):length();
		sufL = (suffix):length();
		((l):_0l(sufL)):ifTrue_(_block( function()
			_nlRes = false; _nonLocal = true; error(_nlRes)
		end ));
		((1)):to_do_(sufL,_block( function(i)
						return (((self):charAt_(((l):_0m(sufL)):_0p(i))):_0q((suffix):charAt_(i))):ifFalse_(_block( function()
				_nlRes = false; _nonLocal = true; error(_nlRes)
			end ))
		end ));
		return true;
	end )
	if _status then return _pcallRes elseif _nonLocal then return _nlRes else error(_pcallRes) end
end

function class.asInteger(self)
	return (Integer):fromString_(self);
end

function class.charAt_(self,argument)
	return (self):substringFrom_to_(argument,argument);
end

function class.print(self)
	(_cl("system")):printString_(self);
	return self
end

