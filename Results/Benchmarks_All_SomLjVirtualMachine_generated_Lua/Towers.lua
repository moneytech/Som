-- generated by SomLjVirtualMachine on Sa. Aug. 29 23:05:07 2020

local metaclass = Towers
local class = Towers._class
local function _block(f) local t = { _f = f }; setmetatable(t,Block._class); return t end
local _str = _primitives._newString
local _sym = _primitives._newSymbol
local _dbl = _primitives._newDouble
local _cl = _primitives._checkLoad

function class.pushDisk_onPile_(self,disk,pile)
	local top
	top = (self[1]):at_(pile);
	((((top):isNil()):_not()):_0aa(_block( function()
				return ((disk):size()):_0gq((top):size())
	end ))):ifTrue_(_block( function()
				return (self):error_(_str("Cannot put a big disk on a smaller one"))
	end ));
	(disk):next_(top);
	(self[1]):at_put_(pile,disk);
	return self
end

function class.popDiskFrom_(self,pile)
	local top
	top = (self[1]):at_(pile);
	((top):isNil()):ifTrue_(_block( function()
				return (self):error_(_str("Attempting to remove a disk from an empty pile"))
	end ));
	(self[1]):at_put_(pile,(top):next());
	(top):next_(nil);
	return top;
end

function class.moveTopDiskFrom_to_(self,fromPile,toPile)
	(self):pushDisk_onPile_((self):popDiskFrom_(fromPile),toPile);
	self[2] = (self[2]):_0p((1));
	return self
end

function class.buildTowerAt_disks_(self,pile,disks)
	(disks):downTo_do_((0),_block( function(i)
				return (self):pushDisk_onPile_((TowersDisk):new_(i),pile)
	end ));
	return self
end

function class.move_disksFrom_to_(self,disks,fromPile,toPile)
	((disks):_0q((1))):ifTrue_ifFalse_(_block( function()
				return (self):moveTopDiskFrom_to_(fromPile,toPile)
	end ),_block( function()
		local otherPile
		otherPile = (((6)):_0m(fromPile)):_0m(toPile);
		(self):move_disksFrom_to_((disks):_0m((1)),fromPile,otherPile);
		(self):moveTopDiskFrom_to_(fromPile,toPile);
				return (self):move_disksFrom_to_((disks):_0m((1)),otherPile,toPile)
	end ));
	return self
end

function class.benchmark(self)
	self[1] = (Array):new_((4));
	(self):buildTowerAt_disks_((1),(13));
	self[2] = (0);
	(self):move_disksFrom_to_((13),(1),(2));
	return self[2];
end

function class.verifyResult_(self,result)
	return (self):assert_equals_((8191),result);
end

